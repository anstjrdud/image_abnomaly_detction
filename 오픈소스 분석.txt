요구되는 Python 기능 버전

click==8.1.7
cuda-python==11.8.2
imgaug==0.4.0
matplotlib==3.8.2
numpy==1.26.3
onnx==1.16.2
onnxruntime-gpu==1.18.1
onnxsim==0.4.36
opencv-python-headless==4.10.0.84
pandas==1.5.2
pillow==10.2.0
scikit-image==0.22.0
scikit-learn==1.4.0
scipy==1.11.4
tensorboard==2.15.1
timm==0.9.12
torch==2.1.2
torchvision==0.16.2
tqdm==4.66.1

main.py             CLI 기반 실행 진입점. 모델과 데이터셋 설정 및 학습/테스트 실행
glass.py             GLASS 클래스 정의. 전체 파이프라인 (학습, 평가, 예측 등) 담당
common.py             Feature 추출, 전처리, 리사이징 및 후처리 모듈 정의
model.py             Discriminator, Projection, PatchMaker 등 핵심 네트워크 블록 구현
loss.py             FocalLoss 구현 (hard negative mining 기반의 binary classification에 적합)
metrics.py             AUROC, AP, PRO 등 평가 지표 계산 함수 구현
utils.py             데이터 변환, 이미지 저장, seed 고정, 디렉토리 관리 등 유틸 함수
backbones.py     다양한 pretrained 백본 모델 로딩 함수 정의
perlin.py             Perlin noise 기반의 마스크 생성: 이미지 증강 및 포그라운드/배경 분리
common.py             Feature 추출/전처리/리사이징 모듈
---

주요 파이프라인 흐름 (GLASS 클래스 기준)

1. **특징 추출**

   * `NetworkFeatureAggregator`는 지정된 백본과 레이어로부터 특징맵을 추출합니다.
   * 특징은 `patchify()` 함수를 통해 여러 패치 단위로 분할됩니다.

2. **임베딩 전처리 및 정규화**

   * `Preprocessing`: adaptive pooling으로 차원 축소.
   * `Aggregator`: feature 평균화로 global representation 생성.
   * `Projection`: 사전 학습된 projection 레이어로 변환 (optional)

3. **학습 단계 (`trainer`)**

   * Patch-level 특징을 이용해 `Discriminator` 학습.
   * `true`/`fake` 패치를 구별하도록 BCE Loss + Focal Loss로 학습.
   * 고차원 특징공간에서 **SVD 기반 투영/변형**을 통해 feature 변조.

4. **테스트 단계 (`tester`)**

   * 저장된 체크포인트 불러와서 이미지 및 픽셀 수준 anomaly score 예측.
   * 평가 지표: image-wise AUROC/AP, pixel-wise AUROC/AP/PRO.

5. **마스크 및 이상 맵 처리**

   * `RescaleSegmentor`: 원래 이미지 크기로 score 맵 복원 + Gaussian filter로 smoothing.
   * `metrics.py`: 평가 지표 계산
